@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TripPlanner.Core.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<h1 class="text-xl font-bold leading-tight tracking-tight md:text-2xl">
    Sign in to your account
</h1>
<StatusMessage Message="@errorMessage"/>

@if (_externalLogins.Any())
{
    <ExternalLoginPicker/>

    <div class="inline-flex items-center justify-center w-full">
        <span
            class="absolute px-3 font-medium text-gray-900 bg-white dark:text-white dark:bg-gray-900">or</span>
        <hr class="w-4/5 h-px my-8 bg-gray-200 border-0 dark:bg-gray-700">
    </div>
}

<EditForm FormName="LoginUser" Model="Input" OnValidSubmit="LoginUser" class="space-y-4 md:space-y-6">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-red-600" role="alert"/>
    <div>
        <label for="email" class="block mb-2 text-sm font-medium">Your
            email</label>
        <InputText @bind-Value="Input.Email" type="email" id="email"
                   class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                   placeholder="name@company.com" required=""/>
        <ValidationMessage For="() => Input.Email" class="text-red-500"/>
    </div>
    <div>
        <label for="password" class="block mb-2 text-sm font-medium">Password</label>
        <InputText @bind-Value="Input.Password" type="password" id="password"
                   placeholder="••••••••"
                   class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                   required=""/>
        <ValidationMessage For="() => Input.Password" class="text-red-500"/>
    </div>
    <div class="flex items-center justify-between">
        <div class="flex items-start">
            <div class="flex items-center h-5">
                <InputCheckbox @bind-Value="Input.RememberMe" id="remember" aria-describedby="remember"
                               type="checkbox"
                               class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800"/>
            </div>
            <div class="ml-3 text-sm">
                <label for="remember" class="text-gray-500 dark:text-gray-300">Remember me</label>
            </div>
        </div>
        <a href="Account/ForgotPassword"
           class="text-sm font-medium text-primary-600 hover:underline dark:text-primary-500">Forgot
            password?</a>
    </div>
    <button type="submit"
            class="w-full text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
        Sign in
    </button>
    <p class="text-sm font-light text-gray-500 dark:text-gray-400">
        Don’t have an account yet? <a
            href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
            class="font-medium text-primary-600 hover:underline dark:text-primary-500">Sign up</a>
    </p>
</EditForm>

@code {
    private string? errorMessage;
    private AuthenticationScheme[] _externalLogins = [];

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        _externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}
