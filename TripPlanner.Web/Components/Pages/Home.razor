@page "/"
@using Ardalis.GuardClauses
@using MediatR
@using TripPlanner.Application.Trips
@using TripPlanner.Application.Trips.Queries

@inject ISender Sender
@inject NavigationManager NavigationManager

<div class="space-y-6 w-full max-w-lg bg-gray-800  border border-gray-700 shadow rounded-lg p-5">

    @if (_trips.Any())
    {
        <h1 class="text-2xl mb-4">Your Trips</h1>

        <ul>
            @foreach (var trip in _trips)
            {
                <li class="block">
                    <a href=@($"/trip/{trip.Id}") class="text-green-400 underline">@trip.Title</a>
                </li>
            }
        </ul>
    }

    <div>
        <h1 class="text-2xl mb-4">Joining a trip?</h1>
        <p class="mb-2">Enter the join code provided by another user</p>
        <form method="post" @onsubmit="JoinTrip" @formname="join-trip-form">
            <AntiforgeryToken/>

            <InputText @bind-Value="JoinCode" maxlength="6" minlength="6" required
                       class="border text-sm rounded-lg p-2.5 bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-blue-500 focus:border-blue-500"/>
            <FlowButton Type="FlowButton.ButtonType.Submit">Join</FlowButton>
        </form>
    </div>


    <div>
        <h1 class="text-2xl mb-4">Creating a new trip?</h1>
        <p class="mb-2">Get started with creating a new trip</p>
        <FlowButton Type="FlowButton.ButtonType.Link" Href="/create">Create a trip</FlowButton>
    </div>
</div>



@code {

    private IReadOnlyCollection<TripDto> _trips = [];

    [SupplyParameterFromForm] private string? JoinCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrips();
    }

    private async Task LoadTrips()
    {
        var result = await Sender.Send(new GetTripsQuery());
        _trips = Guard.Against.Null(result);
    }

    private void JoinTrip()
    {
        if (JoinCode?.Length != 6) return;

        NavigationManager.NavigateTo($"/join/{JoinCode}");
    }

}