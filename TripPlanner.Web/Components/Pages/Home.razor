@page "/"
@using Ardalis.GuardClauses
@using MediatR
@using TripPlanner.Application.Trips.Queries

@inject ISender Sender

@attribute [AllowAnonymous]

<PageTitle>Trip Planner</PageTitle>

<div class="space-y-6">
    <div>
        <p class="text-2xl mb-4">Join a trip</p>
        <form method="post" @onsubmit="JoinTrip" @formname="join-trip-form">
            <AntiforgeryToken/>

            <InputText @bind-Value="JoinCode" class="rounded text-black" maxlength="6" minlength="6"/>
            <button type="submit"
                    class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                Join
            </button>
        </form>
    </div>

    <div>OR</div>

    <div>
        <p class="text-2xl mb-4">Create a trip</p>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <h2>Your Trips</h2>

        @if (_trips != null)
        {
            @foreach (var trip in _trips)
            {
                <p>@trip.Title</p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private IReadOnlyCollection<TripDto>? _trips;

    [SupplyParameterFromForm] private string? JoinCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (authState.User.Identity is { IsAuthenticated: true })
        {
            await LoadTrips();
        }
    }

    private async Task LoadTrips()
    {
        var result = await Sender.Send(new GetTripsQuery());
        _trips = Guard.Against.Null(result);
    }

    private void JoinTrip()
    {
        if (JoinCode?.Length != 6) return;
        Console.WriteLine("Joining trip with code: " + JoinCode);
    }

}