@page "/trip/{Id:guid}"
@using Humanizer
@using MediatR
@using TripPlanner.Application.Entries.Commands
@using TripPlanner.Application.Trips
@using TripPlanner.Application.Trips.Queries
@using TripPlanner.Infrastructure

@rendermode InteractiveServer

@inject ISender Sender

@if (_trip == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="space-y-6 w-full max-w-3xl bg-gray-800 border border-gray-700 shadow rounded-lg p-5 mb-6">

        <div class="mb-4">
            <h1 class="text-3xl">@_trip?.Title</h1>
            <p class="text-lg">@Duration!.Value.Humanize()</p>
            <p class="">From @_trip!.StartDate.ToString("dddd dd MMMM") until @_trip!.EndDate.ToString("dddd dd MMMM")</p>
        </div>

        <code>@_trip?.JoinCode</code>

        <div class="flex flex-col items-center mb-4">
            @foreach (var member in _trip!.Participants)
            {
                <div class="flex items-center gap-4 mb-4">
                    <div
                        class="relative inline-flex items-center justify-center w-10 h-10 overflow-hidden  rounded-full bg-gray-600">
                        <span class="font-medium text-gray-300">@(new string(member.UserName.GetInitials()))</span>
                    </div>
                    <div class="font-medium text-white text-center">
                        <div>@member.UserName</div>
                        <div class="text-sm text-gray-400">Joined @member.JoinedOn.ToLocalTime().Humanize()</div>
                    </div>
                </div>
            }
        </div>

        @foreach (var entry in _trip!.Entries)
        {
            <Entry Model="entry" OnRemove="() => _trip.Entries.Remove(entry)"/>
        }
        
        <AddEntryForm TripId="_trip.Id" Refresh="Refresh"/>

        <a href="/" class="block text-green-500 underline text-left">Go back</a>
    </div>
}

@code {

    [Parameter] public Guid Id { get; set; }

    private TripDto? _trip;

    private TimeSpan? Duration => _trip?.EndDate.Subtract(_trip.StartDate);

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        // get trip
        _trip = await Sender.Send(new GetTripQuery(Id));
    }
}