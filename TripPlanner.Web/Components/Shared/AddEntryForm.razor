@using MediatR
@using TripPlanner.Application.Common.Interfaces
@using TripPlanner.Application.Entries.Commands
@inject ISender Sender
@inject IPlacesService Places

<EditForm Model="Model" OnValidSubmit="AddEntry" FormName="AddEntry">
    <div class="w-full mb-4 border rounded-lg bg-gray-700 border-gray-600">
        <div class="py-2 rounded-t-lg bg-gray-800 divide-y divide-solid divide-gray-600">
            <InputText @bind-Value="Model.Title" id="title"
                       class="px-4 text-lg w-full border-0 bg-gray-800 focus:ring-0 text-white placeholder-gray-400"
                       placeholder="Title*" required/>

            <InputTextArea @bind-Value="Model.Comment" id="description" rows="2"
                           class="px-4 w-full text-sm border-0 bg-gray-800 focus:ring-0 text-white placeholder-gray-400 resize-none"
                           placeholder="Write a comment..."/>

            <div class="px-4 py-2 space-y-2">
                <div class="relative">
                    <input @oninput="OnPlaceQueryChanged" value="@_placeQuery" placeholder="Search for a place (optional)"
                           class="w-full px-3 py-2 rounded bg-gray-900 text-sm text-white placeholder-gray-400 border border-gray-600 focus:outline-none focus:ring-1 focus:ring-blue-500" />

                    @if (_suggestions?.Count > 0 && !_placeSelected)
                    {
                        <ul class="absolute z-10 mt-1 w-full max-h-48 overflow-auto bg-gray-800 border border-gray-600 rounded shadow">
                            @foreach (var s in _suggestions)
                            {
                                <li class="px-3 py-2 hover:bg-gray-700 cursor-pointer" @onclick="(() => SelectPlace(s))">
                                    <div class="text-sm text-white">@s.DisplayName</div>
                                    @if (!string.IsNullOrWhiteSpace(s.Address))
                                    {
                                        <div class="text-xs text-gray-300">@s.Address</div>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </div>

                @if (_placeSelected)
                {
                    <div class="flex items-center justify-between text-sm text-gray-200 bg-gray-900 border border-gray-700 rounded px-3 py-2">
                        <div>
                            <div class="font-medium">@Model.PlaceName</div>
                            @if (!string.IsNullOrWhiteSpace(Model.PlaceAddress))
                            {
                                <div class="text-xs text-gray-400">@Model.PlaceAddress</div>
                            }
                        </div>
                        <button type="button" class="text-xs text-red-300 hover:text-red-200" @onclick="ClearPlace">Remove</button>
                    </div>
                }
            </div>
        </div>
        <div class="flex items-center justify-between px-3 py-2 border-t border-gray-600">
            <FlowButton Type="FlowButton.ButtonType.Submit">Post suggestion</FlowButton>
            <div class="flex ps-0 space-x-1 rtl:space-x-reverse sm:ps-2">
                <button type="button"
                        class="inline-flex justify-center items-center p-2 rounded cursor-pointer text-gray-400 hover:text-white hover:bg-gray-600">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                         viewBox="0 0 12 20">
                        <path stroke="currentColor" stroke-linejoin="round" stroke-width="2"
                              d="M1 6v8a5 5 0 1 0 10 0V4.5a3.5 3.5 0 1 0-7 0V13a2 2 0 0 0 4 0V6"/>
                    </svg>
                    <span class="sr-only">Attach file</span>
                </button>
                <button type="button"
                        class="inline-flex justify-center items-center p-2 rounded cursor-pointer text-gray-400 hover:text-white hover:bg-gray-600">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                         fill="currentColor"
                         viewBox="0 0 16 20">
                        <path
                            d="M8 0a7.992 7.992 0 0 0-6.583 12.535 1 1 0 0 0 .12.183l.12.146c.112.145.227.285.326.4l5.245 6.374a1 1 0 0 0 1.545-.003l5.092-6.205c.206-.222.4-.455.578-.7l.127-.155a.934.934 0 0 0 .122-.192A8.001 8.001 0 0 0 8 0Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z"/>
                    </svg>
                    <span class="sr-only">Set location</span>
                </button>
                <button type="button"
                        class="inline-flex justify-center items-center p-2 rounded cursor-pointer text-gray-400 hover:text-white hover:bg-gray-600">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                         fill="currentColor"
                         viewBox="0 0 20 18">
                        <path
                            d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                    </svg>
                    <span class="sr-only">Upload image</span>
                </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    
    private CancellationTokenSource? _searchCancellationTokenSource;
    private Timer? _debounceTimer;
    private const int DebounceDelayMs = 300; // Wait 300ms after user stops typing
    private bool _isSearching = false;
    [SupplyParameterFromForm] private CreateEntryModel Model { get; set; } = new();
    [Parameter] public required Guid TripId { get; set; }
    [Parameter] public EventCallback Refresh { get; set; }

    private List<IPlacesService.PlaceSuggestion>? _suggestions;
    private string _placeQuery = string.Empty;
    private bool _placeSelected => !string.IsNullOrWhiteSpace(Model.PlaceName);

    private async Task OnPlaceQueryChanged(ChangeEventArgs e)
    {
        _placeQuery = e.Value?.ToString() ?? string.Empty;
        if (_placeSelected)
        {
            return;
        }
        
        // Cancel previous search
        _searchCancellationTokenSource?.Cancel();
        _debounceTimer?.Dispose();
        
        if (string.IsNullOrWhiteSpace(_placeQuery) || _placeQuery.Length < 2)
        {
            _suggestions = [];
            _isSearching = false;
            StateHasChanged();
            return;
        }

        _isSearching = true;
        StateHasChanged();

        // Debounce the search
        _debounceTimer = new Timer(async void (_) => 
        {
            _searchCancellationTokenSource = new CancellationTokenSource();
            try
            {
                _suggestions = await Places.SearchAsync(_placeQuery, _searchCancellationTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                // Search was cancelled, ignore
            }
            catch
            {
                _suggestions = [];
            }
            finally
            {
                _isSearching = false;
                await InvokeAsync(StateHasChanged);
            }
        }, null, DebounceDelayMs, Timeout.Infinite);
    }

    private void SelectPlace(IPlacesService.PlaceSuggestion s)
    {
        Model.PlaceId = s.Id;
        Model.PlaceName = s.DisplayName;
        Model.PlaceAddress = s.Address;
        _placeQuery = string.Empty;
        _suggestions = [];
    }

    private void ClearPlace()
    {
        Model.PlaceId = null;
        Model.PlaceName = null;
        Model.PlaceAddress = null;
        _placeQuery = string.Empty;
        _suggestions = [];
    }

    private async Task AddEntry()
    {
        await Sender.Send(new CreateEntryCommand(TripId, Model.Title)
        {
            Comment = Model.Comment,
            PlaceId = Model.PlaceId,
            PlaceName = Model.PlaceName,
            PlaceAddress = Model.PlaceAddress
        });

        // clear comment
        Model = new();
        _placeQuery = string.Empty;
        _suggestions = [];

        await Refresh.InvokeAsync();
    }

    class CreateEntryModel
    {
        public string Title { get; set; }
        public string? Comment { get; set; }
        public string? PlaceId { get; set; }
        public string? PlaceName { get; set; }
        public string? PlaceAddress { get; set; }
    }
}