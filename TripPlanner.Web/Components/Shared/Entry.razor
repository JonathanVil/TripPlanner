@using Humanizer
@using MediatR
@using TripPlanner.Application.Entries
@using TripPlanner.Application.Entries.Commands
@using TripPlanner.Application.Reactions.Commands
@using TripPlanner.Core.Enums

@inject ISender Sender

<div class="block space-y-4 items-center max-w-sm p-6 border rounded-lg shadow bg-gray-700 border-gray-600 text-left">
    <div class="flex flex-row justify-between">
        <div>
            <h5 class="mb-2 text-2xl font-bold tracking-tight text-white">@Model.Title</h5>

            @if (Model.Comment is not null)
            {
                <p class="font-normal text-white">@Model.Comment</p>
            }

            @if (!string.IsNullOrWhiteSpace(Model.PlaceName))
            {
                <div class="mt-2 text-sm text-gray-300">
                    <span class="font-medium">@Model.PlaceName</span>
                    @if (!string.IsNullOrWhiteSpace(Model.PlaceAddress))
                    {
                        <span class="text-gray-400"> â€” @Model.PlaceAddress</span>
                    }
                </div>
            }
        </div>
        <EntryReactions @bind-OwnReactions="Model.UserOwnReactions" @bind-ReactionCounts="Model.Reactions" OnToggleReaction="rt => ToggleReaction(rt)"/>
    </div>

    <div class="flex flex-row justify-between text-gray-400">
        <p class="text-sm">@Model.CreatedBy</p>
        @if (Model.IsOwner)
        {
            <DeleteButton OnDelete="Delete">
                <p class="text-sm cursor-pointer underline">Delete</p>
            </DeleteButton>
        }
        <p class="text-sm">@Model.Created.ToLocalTime().Humanize()</p>
    </div>
</div>


@code {
    [Parameter] public required EntryDto Model { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }
    
    private async Task ToggleReaction(ReactionType reactionType)
    {
        await Sender.Send(new ToggleReactionCommand(Model.Id, reactionType));
    }

    private async Task Delete()
    {
        await Sender.Send(new DeleteEntryCommand(Model.Id));
        await OnRemove.InvokeAsync();
    }
}