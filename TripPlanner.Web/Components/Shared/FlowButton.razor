@switch (Type)
{
    case ButtonType.Link:
        <a href="@Href" class="text-white focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none @ColorClasses @Class">@ChildContent</a>
        break;
    case ButtonType.Button:
        <button @onclick="@OnClick" type="button" class="text-white focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none @ColorClasses @Class">@ChildContent</button>
        break;
    default:
        <button type="submit" class="text-white focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none @ColorClasses @Class">@ChildContent</button>
        break;
}

@code {
    private ButtonType? _type;

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public string? Href { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public ButtonType Type
    {
        get => _type ?? (Href != null ? ButtonType.Link : ButtonType.Submit);
        set => _type = value;
    }

    [Parameter] public string? Class { get; set; }

    [Parameter] public ButtonColor Color { get; set; } = ButtonColor.Default;

    private string ColorClasses => Color switch
    {
        ButtonColor.Default => "bg-blue-700 hover:bg-blue-800 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800",
        ButtonColor.Red => "bg-red-700 hover:bg-red-800 focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800",
        _ => throw new NotImplementedException()
    };

    public enum ButtonType
    {
        Button,
        Link,
        Submit
    }

    public enum ButtonColor
    {
        Default,
        Red
    }

}