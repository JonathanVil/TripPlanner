@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@inherits InputBase<string>

<label for="@FieldIdentifier.FieldName" class="mb-2 text-sm font-medium text-white">@Label</label>
<input @attributes="AdditionalAttributes" @value="@Value" @onchange="SetValue" id="@FieldIdentifier.FieldName"
       class="@CssClass border text-sm rounded-lg p-2.5 bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-blue-500 focus:border-blue-500"/>
@if (Validation)
{
    <ValidationMessage For="@ValueExpression" class="mt-2 text-sm text-red-500"/>
}

@code {

    [Parameter]
    public Expression<Func<string?>>? For
    {
        get => ValueExpression;
        set => ValueExpression = value;
    }

    [Parameter] public required string Label { get; set; }
    
    [Parameter] public bool Validation { get; set; } = true;
    
    [CascadingParameter]
    private EditContext? CascadedEditContext { get; set; }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    void SetValue(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        ValueChanged.InvokeAsync(Value);
        CascadedEditContext?.NotifyFieldChanged(FieldIdentifier);
    }
}